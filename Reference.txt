
Netflix (4 hours)
  Props [DONE]
  States [DONE]
  Events [DONE]
  Lists & Keys  [DONE]
  Conditional Rendering  [DONE]

Setting up REST API for the app 
User manager CRUD App 
  Create User [DONE]
  List Users [DOME]
  User Details [DONE]  
    Edit user [TODO]
    Delete User [TODO]


React Query  
Axios and fetch 

=====
E-commerce App (Context API)
  List Products 
  Add to Cart 

Todos App (useReducer hook)

Debugging 
PErformance tuning 

Zustand 

Build & Deploy 



====

 Thinking in React 
===
  Step 0: Identifying the number of components 
  Step 1: Comp hierarhcy


components
=====
  2 Types 
  ===
    1. Functional Components [TO LEARN]
      1.1 Functional Component with Named Function
          header component
      1.2 Functional Component with Anonymous Function
          footer component
      1.3 Functional Component with Arrow Function
    2. Class Components [NOT RECOMMENDED]

   

Routing 
====
  npm install react-router-dom

Steps 
====
  1. identify the routes (urls) and menus 
    - Home            -- url: /
    - Netflix         -- url: /netflix
    - Users           -- url: /users
    - About           -- url: /about`
    - Products        -- url: /products
    - Todos           -- url: /todos
    
  2. create a component for each route  
    - url: /            -- component: HomePage
    - url: /netflix     -- component: NetflixPage
    - url: /users       -- component: UsersPage
    - url: /about       -- component: AboutPage
    - url: /products    -- component: ProductsPage
    - url: /todos       -- component: TodosPage

  3. setup the routes in the App.tsx file
    - import { BrowserRouter } from 'react-router-dom';
  
  4. Configure the routes in the App.tsx file
      


Cross Component Communication
===
  1. Parent to Child Component Communication  [DONE]
      using props
  2. Child to Parent Component Communication  [DONE]
      using props and events 
  3. Any to Any Component Communication
      using 
        1. Context API (part of React)
        2. Redux / Redux Toolkit / Zustand / Recoil / MobX 

      
JSX Limitations
===
  1. You must a separate closing tag or self closing tag
  2. class attribute is not allowed. it must be className
  3. style attribute will expect expression. inside which you need to have object 
  4. JSX expressions must have one parent element.

Rules of Hooks 
====
  1. Only call Hooks at the Top Level
  2. Donâ€™t call Hooks inside loops, conditions, or nested functions.
  3. Call Hooks from React Function Components
  4. Call Hooks from custom Hooks 